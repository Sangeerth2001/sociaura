// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image String?
  location String?
  website String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts     Post[]    //one-to-many relation with Post
  comments  Comment[] //one-to-many relation with Comment
  likes     Like[]    //one-to-many relation with Like

  followers Follows[] @relation("following") //users who follow this user
  following Follows[] @relation("follower") //users this user follows

  notifications Notification[] @relation("userNotifications")  //notifications received by the user
  notificationsCreated Notification[] @relation("notificationCreator") //notifications created by the user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade) //cascade delete meaning if a user is deleted, their posts will be deleted too

  comments  Comment[] //one-to-many relation with Comment
  likes     Like[]    //one-to-many relation with Like
  notifications Notification[] 
}

model Comment{
  id String @id @default(cuid())
  Content String
  authorId String
  postId String
  CreatedAt DateTime @default(now())

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //cascade delete meaning if a user is deleted, their comments will be deleted too  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //cascade delete meaning if a post is deleted, its comments will be deleted too
  notifications Notification[]

  @@index([authorId, postId]) //indexing for faster queries
}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  CreatedAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //cascade delete meaning if a user is deleted, their likes will be deleted too  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //cascade delete meaning if a post is deleted, its likes will be deleted too

  @@unique([userId, postId]) //a user can like a post only once
  @@index([userId, postId]) //indexing for faster queries
}

model Follows {
  // id String @id @default(cuid())
  followerId String
  followingId String
  CreatedAt DateTime @default(now())

  //Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) //cascade delete meaning if a user is deleted, their follows will be deleted too  
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade) //cascade delete meaning if a user is deleted, their follows will be deleted too

  @@index([followerId, followingId]) //indexing for faster queries
  @@id([followerId, followingId]) //composite primary key
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}